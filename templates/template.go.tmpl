{{ $decorator := (or .Vars.DecoratorName (printf "%sExample" .Interface.Name )) }}
{{ $input := (printf "%sInput" .Interface.Name) }}
{{ $output := (printf "%sOutput" .Interface.Name) }}

// {{$input}} is an alias for {{.Interface.Type}} 
type {{$input}}{{.Interface.Generics.Types}} {{.Interface.Type}}{{.Interface.Generics.Params}}

// {{$output}} is an alias for {{.Interface.Type}} 
type {{$output}}{{.Interface.Generics.Types}} {{.Interface.Type}}{{.Interface.Generics.Params}}

// {{$decorator}} implements {{$input}}
type {{$decorator}}{{.Interface.Generics.Types}} struct {
  base {{$input}}{{.Interface.Generics.Params}}
}

{{range $method := .Interface.Methods}}
  // {{$method.Name}} implements {{$.Interface.Type}}
  func (d {{$decorator}}{{$.Interface.Generics.Params}}) {{$method.Declaration}} {
      {{ $method.Pass "d.base." }}
  }
{{end}}

// Provide{{$output}} instruments an implementation of the {{$input}}
func Provide{{$output}}{{$.Interface.Generics.Types}}(base {{$input}}{{$.Interface.Generics.Params}}) (output {{$output}}{{$.Interface.Generics.Params}}) {
  if os.Getenv("DECORATE") == "1" {
      return New{{$decorator}}(base)
  }
  output = base
  return
}

// New{{$decorator}} instruments an implementation of the {{$input}}
func New{{$decorator}}{{$.Interface.Generics.Types}}(base {{$input}}{{$.Interface.Generics.Params}}) {{$decorator}}{{$.Interface.Generics.Params}} {
  return {{$decorator}}{{$.Interface.Generics.Params}}{
      base: base,
  }
}